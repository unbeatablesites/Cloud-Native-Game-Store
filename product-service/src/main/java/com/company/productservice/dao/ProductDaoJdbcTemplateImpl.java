package com.company.productservice.dao;

import com.company.productservice.dto.Product;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class ProductDaoJdbcTemplateImpl implements ProductDao{

    //DI - doing it on the constructor level
    private JdbcTemplate jdbcTemplate;
    @Autowired
    public ProductDaoJdbcTemplateImpl(JdbcTemplate jdbcTemplate){
        this.jdbcTemplate=jdbcTemplate;
    }

    //Prepared statements
    private static final String INSERT_PRODUCT =
            "insert into product (product_name,product_description,list_price,unit_cost) values (?,?,?,?)";
    private static final String SELECT_PRODUCT =
            "select * from product where product_id = ?";
    private static final String SELECT_ALL_PRODUCTS =
            "select * from product";
    private static final String UPDATE_PRODUCT =
            "update product set product_name=?, product_description=?, list_price=?, unit_cost=? where product_id=?";
    private static final String DELETE_PRODUCT =
            "delete from product where product_id = ?";

    //row mapper function
    public Product mapRowToProduct(ResultSet rs, int rowNum) throws SQLException{
        //create the product object and set all columns with the matching column labels in the workbench
        Product p = new Product();
        p.setProductId(rs.getInt("product_id"));
        p.setProductName(rs.getString("product_name"));
        p.setProductDescription(rs.getString("product_description"));
        p.setListPrice(rs.getBigDecimal("list_price"));
        p.setUnitCost(rs.getBigDecimal("unit_cost"));
        return p;
    }

    @Override
    @Transactional
    public Product addProduct(Product product) {
        //use the jdbcTemplate.update with INSERT prepared statement.
        //get the product properties off of product parameter.
        jdbcTemplate.update(INSERT_PRODUCT,
                product.getProductName(),
                product.getProductDescription(),
                product.getListPrice(),
                product.getUnitCost()
        );
        //you need to set up the id separately since it is being autogenerated from SQL
        int id = jdbcTemplate.queryForObject("select last_insert_id()", Integer.class);
        product.setProductId(id);
        return product;
    }

    @Override
    public Product getProductById(int id) {
        //try catch to return the requested Product object.
        //if it throws an empty result data access exception, return null
        try{
            return jdbcTemplate.queryForObject(SELECT_PRODUCT,this::mapRowToProduct,id);
        } catch(EmptyResultDataAccessException e){
            return null;
        }
    }

    @Override
    public List<Product> getAllProducts() {
        //simply return all the products using the jdbcTemplate query feature
        return jdbcTemplate.query(SELECT_ALL_PRODUCTS,this::mapRowToProduct);
    }

    @Override
    public Product updateProduct(Product product) {
        //similiar with addProduct implementation.
        //only thing is that you need to get the productId as well.
        jdbcTemplate.update(UPDATE_PRODUCT,
                product.getProductName(),
                product.getProductDescription(),
                product.getListPrice(),
                product.getUnitCost(),
                product.getProductId()
        );
        return product;
    }

    @Override
    public void deleteProduct(int id) {
        //simply delete the product using the jdbcTemplate update
        jdbcTemplate.update(DELETE_PRODUCT,id);
    }
}
